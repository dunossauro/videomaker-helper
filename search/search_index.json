{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcf9 VideoMaker Helper","text":""},{"location":"#videomaker-helper","title":"\ud83d\udcf9 VideoMaker Helper","text":"<p>This project is at a very early stage of development, bugs and lack of documentation are expected at this stage.</p> <p>VideoMaker Helper is a collection of command-line utilities designed to simplify common tasks for video and audio content creators. These tools aim to automate specific aspects of the video-making process, reducing manual work and enhancing overall efficiency.</p>"},{"location":"#core-features","title":"\ud83e\udd5d Core Features:","text":"<ul> <li> <p>Silence Detection: Automatically detect silent segments in audio files. Useful for determining parts to edit or skip.</p> </li> <li> <p>Audio Equalization: Adjust the audio to a consistent level across a file. This tool can add compression and gain to improve the listening experience.</p> </li> <li> <p>Audio Extraction: Pull audio content from video files. With an option to receive both the raw extracted audio and an equalized version.</p> </li> <li> <p>Video Editing: Based on silence detection, automatically cut portions of a video, providing a streamlined content experience. See the examples at video-cut examples</p> </li> </ul>"},{"location":"#installation","title":"Installation:","text":"<p>To install VideoMaker Helper, simply use the following command:</p> <pre><code>pipx install git+https://github.com/dunossauro/videomaker-helper.git\n</code></pre> <p>With VideoMaker Helper installed, you can easily run any of the included tools from your terminal. It's a practical toolset for anyone looking to expedite their content creation process.</p> <p></p>"},{"location":"CHANGELOG/","title":"Changelogs","text":""},{"location":"CHANGELOG/#changelogs","title":"Changelogs","text":""},{"location":"CHANGELOG/#unreleased-2025-02-03","title":"Unreleased - 2025-02-03","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>CI matrix testing 3.11, 3.12 and 3.13 (#11)</li> <li>Link to the ropository in the documentation by @caio-imperial (#20)</li> <li><code>cut_silences</code> now supports distances</li> </ul> <p>Reference: Distance Flag (#26) - Changelog page in docs using snippets and towncrier by @yanndrade (#33) - Darkmode option in documentation by @taconi (#34) - Search bar in docs by @yanndrade (#35) - CI configuration to run to the Pull Requests by @taconi (#40)</p>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Replacing appdirs (not manteined) for platformdirs (#6)</li> <li>Cache now only stores the silences without distance (#17)</li> <li>Change package name from vmh to videomaker_helper</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Breaking: Parameter in <code>extract-audio</code> to receive video, not audio by @caio-imperial (#18)</li> <li>Adjustments for kdenlive to recognize if video and .kdenlive is in the path</li> <li>Fixed package name on mkdocstrings and update mkdocstrings</li> <li>Migrate appdirs to platformdirs, now platformdirs creates .config path</li> <li>Moviepy 2.0 subclips support</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Para ver o guia de contribui\u00e7\u00e3o em Portugu\u00eas, clique aqui.</p>"},{"location":"contributing/#contribution-guide","title":"Contribution Guide","text":""},{"location":"contributing/#tldr","title":"TLDR","text":"<p>This project uses poetry as the project manager.</p> <pre><code>poetry install\n</code></pre> <p>If your contribution involves code, please refer to the Style Guide. You can see all available commands in the environment here.</p> <p>To check if everything is correct and the tests pass:</p> <pre><code>poetry run task test\n</code></pre> <p>To start the documentation:</p> <pre><code>poetry run task doc\n</code></pre> <p>If your change is visible to the users of the application, add an entry to the changelog:</p> <pre><code>towncrier create\n</code></pre> <p>The configurations are here.</p> <p>Before submitting your pull request, make sure there's an issue. If not, create one first. The branch name should contain the issue number. For more information.</p>"},{"location":"contributing/#environment-setup","title":"Environment Setup","text":"<p>If you need help setting up the development environment for this project, follow the instructions below.</p>"},{"location":"contributing/#project-management","title":"Project Management","text":"<p>This project uses poetry (2.0.1) as the project manager. You can install it using pipx.</p> <p>You can install it with:</p> <pre><code>pipx install poetry\n</code></pre> <p>In the project directory, run:</p> <pre><code>poetry install\n</code></pre> <p>This will install all project dependencies and the editable package.</p>"},{"location":"contributing/#development-tools","title":"Development Tools","text":"<p>A list of development tools and their configurations:</p>"},{"location":"contributing/#taskrunner-taskipy","title":"Taskrunner: taskipy","text":"<p>Taskipy makes it easier to run commands during the development process of the project:</p> pyproject.toml<pre><code>[tool.ruff.format]\nquote-style = \"single\"\n\n[tool.taskipy.tasks]\nformat = 'ruff format'\nlint = 'ruff check'\ntypos = 'typos videomaker_helper tests'\ntypes = 'mypy videomaker_helper'\npre_test = 'task lint'\ntest = 'pytest --cov=videomaker_helper/ -vv -x'\nstest = 'pytest'\n</code></pre> <p>You can use <code>poetry run task --list</code> to see all available commands:</p> <pre><code>$ poetry run task --list\nformat    ruff format\nlint      ruff check\ntypos     typos videomaker_helper tests\ntypes     mypy videomaker_helper\npre_test  task lint\ntest      pytest --cov=videomaker_helper/ -vv -x\npost_test coverage html\ndoc       mkdocs serve\n</code></pre> <p>Below are some of the most common commands you can use:</p> <pre><code>poetry run task test    # Run the automated tests\npoetry run task format  # Format the code\npoetry run task typos   # Check the spelling in the code\n...\n</code></pre>"},{"location":"contributing/#formatting-and-linter-ruff","title":"Formatting and Linter: Ruff","text":"pyproject.toml<pre><code>pythonpath = \".\"\nfilterwarnings = 'ignore'\n\n[tool.ruff]\nline-length = 79\n\n[tool.ruff.lint]\nselect = ['I', 'N', 'F', 'E', 'W', 'D', 'PL']\nignore = ['D100', 'D101', 'D103', 'D104', 'D203', 'D213', 'PLR0913']\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n</code></pre> <p>For more details on style configuration, refer to the Style Guide.</p> <p>To check for compliance, run:</p> <pre><code>poetry run task lint    # Check the project's style guide\npoetry run task format  # Format the files\n</code></pre>"},{"location":"contributing/#static-type-checking-mypy","title":"Static Type Checking: Mypy","text":"pyproject.toml<pre><code>post_test = 'coverage html'\ndoc = 'mkdocs serve'\n</code></pre> <p>To run type checks, execute:</p> <pre><code>poetry run task types\n</code></pre>"},{"location":"contributing/#spelling-check-in-code-typos","title":"Spelling Check in Code: Typos","text":"<p>To run the spelling check, execute:</p> <pre><code>poetry run task typos\n</code></pre>"},{"location":"contributing/#changelogs-with-towncrier","title":"Changelogs with towncrier","text":"<p>All visible changes should add a fragment to the changelog.</p> <p>The tags used follow the Keep a Changelog standard.</p> <p>To add a new fragment:</p> <pre><code>towncrier create\n</code></pre> <p>Configuration: </p>pyproject.toml<pre><code>[tool.mypy]\nignore_missing_imports = true\n\n[tool.towncrier]\ndirectory = \"changelog.d\"\nfilename = \"CHANGELOG.md\"\npackage = \"videomaker_helper\"\nstart_string = \"&lt;!-- towncrier release notes start --&gt;\\n\"\nunderlines = [\"\", \"\", \"\"]\ntitle_format = \"## [{version}](https://github.com/dunossauro/videomaker-helper/tree/{version}) - {project_date}\"\nissue_format = \"[#{issue}](https://github.com/dunossauro/videomaker-helper/issues/{issue})\"\n\n[[tool.towncrier.type]]\ndirectory = \"security\"\nname = \"Security\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"removed\"\nname = \"Removed\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"deprecated\"\nname = \"Deprecated\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"added\"\nname = \"Added\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"changed\"\nname = \"Changed\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"fixed\"\n</code></pre>"},{"location":"contributing/#style-guide","title":"Style Guide","text":"<p>This project follows the style guides:</p> <ul> <li>PEP 8 for code</li> <li>PEP 257 for docstrings</li> <li>Google Docstrings for docstring formatting</li> <li>Keep a Changelog for changelogs</li> </ul> <p>To check code style, run:</p> <pre><code>poetry run task lint\n</code></pre>"},{"location":"contributing/#versioning-and-git","title":"Versioning and Git","text":"<p>There is no predefined format for commit messages. Feel free to choose a style that makes sense. Here are a few things to keep in mind:</p> <ul> <li>All PRs must have an issue. If you want to contribute something that doesn\u2019t have an issue yet, create one before submitting.</li> <li>PRs must be submitted to the <code>development</code> branch.</li> <li>The branch name must start with the issue number:<ul> <li>For example, if the issue number is 42, the branch name would be <code>42_short-description</code>, where 'short-description' is a brief summary of the change.</li> </ul> </li> <li>To notify others you're starting a contribution and allow them to track progress, open a draft PR and link the relevant issue.:<ul> <li>Once the changes are ready, you can mark the PR as \"Ready for review.\"</li> </ul> </li> </ul>"},{"location":"contributing/#changelogs","title":"Changelogs","text":"<p>All visible changes to the users of the application should be documented in the changelog. This helps maintain a clear history of changes and ensures users are aware of updates.</p> <p>After making a change, if it is visible to the application's users, add an entry to the changelog using <code>towncrier</code>:</p> <pre><code>towncrier create\n</code></pre>"},{"location":"contributing/#continuous-integration","title":"Continuous Integration","text":"<p>This project uses GitHub Actions for Continuous Integration (CI). If you need to run the entire process locally, you can use act:</p> <pre><code>act\n</code></pre> <p><code>act</code> is a tool that emulates GitHub Actions workflows locally, allowing you to run tests and CI processes without needing to push to the repository.</p> <p>The full CI configuration can be found in <code>.github/workflows/pipeline.yaml</code></p>"},{"location":"contributing/#guia-de-contribuicao","title":"Guia de contribui\u00e7\u00e3o","text":""},{"location":"contributing/#tldr_1","title":"TLDR","text":"<p>O projeto usa o poetry como gerenciador de projeto.</p> <pre><code>poetry install\n</code></pre> <p>Se sua contribui\u00e7\u00e3o envolver c\u00f3digo, consulte o Guia de estilo. Voc\u00ea pode ver todos os comandos dispon\u00edveis no ambiente aqui.</p> <p>Para checar se tudo est\u00e1 correto e os testes passam:</p> <pre><code>poetry run task test\n</code></pre> <p>Para iniciar a documenta\u00e7\u00e3o:</p> <pre><code>poetry run task doc\n</code></pre> <p>Caso sua altera\u00e7\u00e3o seja vis\u00edvel a quem for usar a aplica\u00e7\u00e3o, adicione uma entrada ao changelog:</p> <pre><code>towncrier create\n</code></pre> <p>As configura\u00e7\u00f5es est\u00e3o aqui.</p> <p>Antes de enviar seu pull request, garanta que exista uma issue, se n\u00e3o houver uma, crie antes de submeter, o nome da branch deve conter o n\u00famero da issue. Caso precise de mais informa\u00e7\u00f5es.</p>"},{"location":"contributing/#configuracao-do-ambiente","title":"Configura\u00e7\u00e3o do ambiente","text":"<p>Se voc\u00ea precisar de ajuda para configurar o ambiente de desenvolvimento deste projeto, siga as instru\u00e7\u00f5es abaixo.</p>"},{"location":"contributing/#gerenciamento-de-projeto","title":"Gerenciamento de projeto","text":"<p>Esse projeto usa o poetry (2.0.1) como gerenciador de projeto. Voc\u00ea pode instalar ele com pipx.</p> <p>Voc\u00ea pode instalar com:</p> <pre><code>pipx install poetry\n</code></pre> <p>No diret\u00f3rio do projeto, execute:</p> <pre><code>poetry install\n</code></pre> <p>para instalar todas as depend\u00eancias do projeto e o pacote edit\u00e1vel.</p>"},{"location":"contributing/#ferramentas-de-desenvolvimento","title":"Ferramentas de desenvolvimento","text":"<p>Uma lista das ferramentas de desenvolvimento e suas configura\u00e7\u00f5es:</p>"},{"location":"contributing/#taskrunner-taskipy_1","title":"Taskrunner: taskipy","text":"<p>O taskipy facilita a execu\u00e7\u00e3o dos comandos durante o momento de desenvolvimento do projeto:</p> pyproject.toml<pre><code>[tool.ruff.format]\nquote-style = \"single\"\n\n[tool.taskipy.tasks]\nformat = 'ruff format'\nlint = 'ruff check'\ntypos = 'typos videomaker_helper tests'\ntypes = 'mypy videomaker_helper'\npre_test = 'task lint'\ntest = 'pytest --cov=videomaker_helper/ -vv -x'\nstest = 'pytest'\n</code></pre> <p>Voc\u00ea pode usar poetry run task --list para ver todos os comandos dispon\u00edveis:</p> <pre><code>$ poetry run task --list\nformat    ruff format\nlint      ruff check\ntypos     typos videomaker_helper tests\ntypes     mypy videomaker_helper\npre_test  task lint\ntest      pytest --cov=videomaker_helper/ -vv -x\npost_test coverage html\ndoc       mkdocs serve\n</code></pre> <p>Abaixo est\u00e3o alguns dos comandos mais comuns que voc\u00ea pode utilizar:</p> <pre><code>poetry run task test    # Executa os testes automatizados\npoetry run task format  # Executa a formata\u00e7\u00e3o do c\u00f3digo\npoetry run task typos   # Checa a grafia do c\u00f3digo\n...\n</code></pre>"},{"location":"contributing/#formatacao-e-linter-ruff","title":"Formata\u00e7\u00e3o e linter: Ruff","text":"pyproject.toml<pre><code>pythonpath = \".\"\nfilterwarnings = 'ignore'\n\n[tool.ruff]\nline-length = 79\n\n[tool.ruff.lint]\nselect = ['I', 'N', 'F', 'E', 'W', 'D', 'PL']\nignore = ['D100', 'D101', 'D103', 'D104', 'D203', 'D213', 'PLR0913']\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n</code></pre> <p>Para mais detalhes sobre a configura\u00e7\u00e3o do estilo, consulte o Guia de estilo.</p> <p>Basicamente para executar a checagem voc\u00ea deve executar:</p> <pre><code>poetry run task lint    # Checa o guia de estilo do projeto\npoetry run task format  # Formata os arquivos\n</code></pre>"},{"location":"contributing/#checagem-de-tipos-estaticos-mypy","title":"Checagem de tipos est\u00e1ticos: Mypy","text":"pyproject.toml<pre><code>post_test = 'coverage html'\ndoc = 'mkdocs serve'\n</code></pre> <p>Para executar a checagem de tipos voc\u00ea pode executar:</p> <pre><code>poetry run task types\n</code></pre>"},{"location":"contributing/#checagem-de-erros-de-grafia-no-codigo-typos","title":"Checagem de erros de grafia no c\u00f3digo: Typos","text":"<p>Para executar a checagem de erros de grafia voc\u00ea pode executar:</p> <pre><code>poetry run task typos\n</code></pre>"},{"location":"contributing/#changelogs-com-towncrier","title":"Changelogs com towncrier","text":"<p>Todas as altera\u00e7\u00f5es vis\u00edveis devem adicionar um fragmento ao changelog.</p> <p>As tags usadas seguem o padr\u00e3o Keep a changelook.</p> <p>Para adicionar um novo fragmento:</p> <pre><code>towncrier create\n</code></pre> <p>Configura\u00e7\u00e3o: </p>pyproject.toml<pre><code>[tool.mypy]\nignore_missing_imports = true\n\n[tool.towncrier]\ndirectory = \"changelog.d\"\nfilename = \"CHANGELOG.md\"\npackage = \"videomaker_helper\"\nstart_string = \"&lt;!-- towncrier release notes start --&gt;\\n\"\nunderlines = [\"\", \"\", \"\"]\ntitle_format = \"## [{version}](https://github.com/dunossauro/videomaker-helper/tree/{version}) - {project_date}\"\nissue_format = \"[#{issue}](https://github.com/dunossauro/videomaker-helper/issues/{issue})\"\n\n[[tool.towncrier.type]]\ndirectory = \"security\"\nname = \"Security\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"removed\"\nname = \"Removed\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"deprecated\"\nname = \"Deprecated\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"added\"\nname = \"Added\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"changed\"\nname = \"Changed\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"fixed\"\n</code></pre>"},{"location":"contributing/#guia-de-estilo","title":"Guia de estilo","text":"<p>Esse projeto segue os guias de estilo:</p> <ul> <li>PEP 8 para c\u00f3digo</li> <li>PEP 257 para docstrings</li> <li>Google Docstrings para o formato das docstrings</li> <li>Keep a changelook para changelogs</li> </ul> <p>Para checar a conformidade do c\u00f3digo voc\u00ea pode executar:</p> <pre><code>poetry run task lint\n</code></pre>"},{"location":"contributing/#versionamento-e-git","title":"Versionamento e git","text":"<p>Para enviar sua contribui\u00e7\u00e3o, n\u00e3o h\u00e1 um formato pr\u00e9-definido para as mensagens de commit. Sinta-se \u00e0 vontade para escolher um estilo que fa\u00e7a sentido. Somente alguns pontos para aten\u00e7\u00e3o:</p> <ul> <li>Todos os PRs enviados devem ter uma issue, caso voc\u00ea queira contribuir com algo que ainda n\u00e3o tem issue, abra uma issue antes.</li> <li>As solicita\u00e7\u00f5es de PR devem ser enviadas para branch development.</li> <li>O nome da branch deve iniciar com o n\u00famero da issue<ul> <li>Por exemplo, se a issue for n\u00famero 42, o nome da branch seria <code>42_texto</code>, onde 'texto' \u00e9 uma descri\u00e7\u00e3o curta da mudan\u00e7a.</li> </ul> </li> <li>Para notificar que voc\u00ea est\u00e1 come\u00e7ando uma contribui\u00e7\u00e3o e permitir que outros saibam, abra um PR como 'draft' e vincule a issue relevante:<ul> <li>Ao finalizar as altera\u00e7\u00f5es voc\u00ea pode clicar em \"Ready for review\"</li> </ul> </li> </ul>"},{"location":"contributing/#changelogs_1","title":"Changelogs","text":"<p>Todas as altera\u00e7\u00f5es vis\u00edveis para os usu\u00e1rios da aplica\u00e7\u00e3o devem ser documentadas no changelog. Isso ajuda a manter um hist\u00f3rico claro das mudan\u00e7as feitas e garante que os usu\u00e1rios estejam cientes das atualiza\u00e7\u00f5es.</p> <p>Ap\u00f3s a altera\u00e7\u00e3o, caso ela seja vis\u00edvel para quem usa aplica\u00e7\u00e3o adicione uma entrada no changelog usando o <code>towncrier</code>:</p> <pre><code>towncrier create\n</code></pre>"},{"location":"contributing/#integracao-continua","title":"Integra\u00e7\u00e3o cont\u00ednua","text":"<p>Este projeto utiliza o GitHub Actions para realizar a Integra\u00e7\u00e3o Cont\u00ednua (CI). Se precisar executar todo o fluxo localmente voc\u00ea pode usar o act:</p> <pre><code>act\n</code></pre> <p>O act \u00e9 uma ferramenta que emula os workflows do GitHub Actions localmente, permitindo que voc\u00ea execute testes e processos de integra\u00e7\u00e3o cont\u00ednua sem precisar fazer push para o reposit\u00f3rio.</p> <p>A configura\u00e7\u00e3o completa do CI pode ser encontrada em <code>.github/workflows/pipeline.yaml</code></p>"},{"location":"cut-silences/","title":"Cut Silences","text":""},{"location":"cut-silences/#cut-silences","title":"Cut Silences","text":"<p>The <code>cut-silences</code> command is an essential utility for audio editors, podcasters, and content creators who wish to refine the auditory experience of their content. It meticulously scans the provided audio file and removes all the detected silent portions, ensuring the end result is a continuous and engaging audio piece without abrupt or prolonged gaps.</p>"},{"location":"cut-silences/#features","title":"Features:","text":"<ul> <li> <p>Simple Input: The command needs just the source <code>audio_file</code> and the desired <code>output_file</code> where the processed audio will be saved.</p> </li> <li> <p>Efficient Silence Removal: Leveraging advanced algorithms, this tool efficiently detects and eliminates silences, making the audio flow more natural.</p> </li> <li> <p>Customizable Detection: Users have the flexibility to define what constitutes a 'silence' in their audio:</p> </li> <li><code>silence-time</code> (or <code>-s</code>): Determines the minimum duration of a silence (measured in milliseconds) before it's considered for removal.</li> <li><code>threshold</code> (or <code>-t</code>): Sets the decibel level below which an audio segment is considered silent.</li> </ul>"},{"location":"cut-silences/#example-usage","title":"Example Usage:","text":"<p>To remove silences from an audio file named <code>podcast.mp3</code> and save the processed audio as <code>podcast_no_silences.mp3</code>, use:</p> <pre><code>vmh cut-silences podcast.mp3 podcast_no_silences.mp3\n</code></pre>"},{"location":"cut-silences/#-help-flag-output","title":"<code>--help</code> Flag Output:","text":"<pre><code>$ vmh cut-silences --help\n\n Usage: vmh cut-silences [OPTIONS] AUDIO_FILE OUTPUT_FILE                              \n\n Removes all silences from an audio file.                                              \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    audio_file       PATH  [default: None] [required]                              \u2502\n\u2502 *    output_file      PATH  [default: None] [required]                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --silence-time  -s      INTEGER                       Minimal time in ms for        \u2502\n\u2502                                                       configure a silence           \u2502\n\u2502                                                       [default: 400]                \u2502\n\u2502 --threshold     -t      INTEGER                       Value in db for detect        \u2502\n\u2502                                                       silence                       \u2502\n\u2502                                                       [default: -65]                \u2502\n\u2502 --distance      -d      [negative|tiny|small|medium|  Distance betweet silences     \u2502\n\u2502                         large|huge]                   [default: tiny]               \u2502\n\u2502 --help                                                Show this message and exit.   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"cut-silences/#api-for-developers","title":"API for developers","text":"Source code in <code>videomaker_helper/audio.py</code> <pre><code>def cut_silences(\n    audio_file: str,\n    output_file: str,\n    silence_time: int = 400,\n    threshold: int = -65,\n    distance: Literal[\n        'negative',\n        'tiny',\n        'small',\n        'medium',\n        'large',\n        'huge',\n    ] = 'tiny',\n) -&gt; Path:\n    logger.info(f'Reading file: {audio_file}')\n    audio = AudioSegment.from_file(audio_file)\n    logger.info(f'File read: {audio_file}')\n\n    logger.info(f'Detecting silences with distance: {distance}')\n\n    silences = detect_silences(\n        audio_file,\n        silence_time=silence_time,\n        threshold=threshold,\n        distance=distance,\n    )\n\n    logger.info('Deleting silences')\n\n    not_silent_segments = islice(pairwise(silences), 1, None, 2)\n    combined = AudioSegment.empty()\n\n    for start, stop in not_silent_segments:\n        logger.debug(f'Cutting from {start} to {stop}')\n        start_ms = int(start * 1000)\n        stop_ms = int(stop * 1000)\n        combined += audio[start_ms:stop_ms]\n\n    logger.info(f'Writing file: {output_file}')\n\n    combined.export(output_file, format='mp3')\n\n    return Path(output_file)\n</code></pre>"},{"location":"cut-video/","title":"Cut Video","text":""},{"location":"cut-video/#cut-video","title":"Cut Video","text":"<p>The <code>cut-video</code> command creates a new video by removing the silences present in the video file.</p> <p>For example:</p> <pre><code>vmh cut-video sample.mp4\n</code></pre> <p>This will remove the silences and generate a file called <code>result.mp4</code>.</p> <p>You can find some examples of cuts here.</p>"},{"location":"cut-video/#usage-examples","title":"Usage examples","text":""},{"location":"cut-video/#simple-cuts","title":"Simple cuts","text":"<p>To edit a video named <code>sample.mp4</code> using the default parameters, use:</p> <pre><code>vmh cut-video sample.mp4\n</code></pre> <p>This will remove the silences and generate a file called <code>result.mp4</code>.</p>"},{"location":"cut-video/#cuts-based-on-another-audio-file","title":"Cuts based on another audio file","text":"<p>Sometimes, we have a video file and an external audio file that is already equalized and processed.</p> <p>We can cut the video based on the silences from this audio and generate a new file that removes the original audio from the video and replaces it with the new audio file:</p> <pre><code>vmh cut-video video_sample.mp4 --audio_file equalized_audio.wav\n</code></pre> <p>This way, the new video will have the equalized audio with the cuts already applied.</p>"},{"location":"cut-video/#concepts-and-features","title":"Concepts and features","text":"<p>Silences are defined by the audio threshold and the minimum duration of silence found in the audio. As this is common for all cutting commands, the explanation can be found here.</p>"},{"location":"cut-video/#-help-flag-output","title":"<code>--help</code> Flag Output:","text":"<pre><code>$ vmh cut-video --help\n\n Usage: vmh cut-video [OPTIONS] VIDEO_FILE [OUTPUT_PATH] [AUDIO_FILE]                  \n\n Edits a video using silences as reference.                                            \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    video_file       PATH           [default: None] [required]                     \u2502\n\u2502      output_path      [OUTPUT_PATH]  [default: result.mp4]                          \u2502\n\u2502      audio_file       [AUDIO_FILE]   Optional audio equilized audio file            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --silence-time  -s                INTEGER                  Minimal time in ms for   \u2502\n\u2502                                                            configure a silence      \u2502\n\u2502                                                            [default: 400]           \u2502\n\u2502 --threshold     -t                INTEGER                  Value in db for detect   \u2502\n\u2502                                                            silence                  \u2502\n\u2502                                                            [default: -65]           \u2502\n\u2502 --distance      -d                [negative|tiny|small|me  Distance betweet         \u2502\n\u2502                                   dium|large|huge]         silences                 \u2502\n\u2502                                                            [default: tiny]          \u2502\n\u2502 --codec         -c                [libx264|mpeg4|rawvideo  [default: mpeg4]         \u2502\n\u2502                                   |png|libvorbis|libvpx]                            \u2502\n\u2502 --preset        -p                [ultrafast|superfast|ve  [default: medium]        \u2502\n\u2502                                   ryfast|faster|fast|medi                           \u2502\n\u2502                                   um|slow|slower|veryslow                           \u2502\n\u2502                                   ]                                                 \u2502\n\u2502 --bitrate       -b                TEXT                     [default: 15M]           \u2502\n\u2502 --force             --no-force                             Ignore cache             \u2502\n\u2502                                                            [default: no-force]      \u2502\n\u2502 --help                                                     Show this message and    \u2502\n\u2502                                                            exit.                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"cut-video/#api-for-developers","title":"API for developers","text":"Source code in <code>videomaker_helper/video.py</code> <pre><code>def cut_video(\n    input_file: str,\n    output_file: str,\n    silence_time: int,\n    threshold: int,\n    distance: Literal[\n        'negative',\n        'tiny',\n        'small',\n        'medium',\n        'large',\n        'huge',\n    ] = 'tiny',\n    bitrate: str = '15M',\n    codec: Codec = Codec.mpeg4,\n    audio_file: str = '',\n    preset: Preset = Preset.medium,\n    force: bool = True,\n):\n    logger.info(f'Detecting silences on {input_file}')\n    if audio_file:\n        silences = detect_silences(\n            audio_file,\n            force=force,\n            threshold=threshold,\n            silence_time=silence_time,\n            distance=distance,\n        )\n        video = VideoFileClip(input_file)\n        paudio = AudioFileClip(str(audio_file))\n        video.audio = paudio\n    else:\n        silences = detect_silences(\n            input_file,\n            force=force,\n            threshold=threshold,\n            silence_time=silence_time,\n            distance=distance,\n        )\n        video = VideoFileClip(input_file)\n\n    logger.info(f'Creating subclips on {input_file}')\n    clips = [\n        video.subclipped(start, stop)\n        for start, stop in islice(pairwise(silences), 1, None, 2)\n    ]\n\n    final_video = concatenate_videoclips(clips)\n\n    logger.info(f'Writing {output_file}')\n    final_video.write_videofile(\n        output_file,\n        codec=codec.value,\n        preset=preset.value,\n        bitrate=bitrate,\n    )\n</code></pre>"},{"location":"equalize/","title":"Equalize","text":""},{"location":"equalize/#equalize","title":"Equalize","text":"<p>TODO</p>"},{"location":"equalize/#-help-flag-output","title":"<code>--help</code> Flag Output:","text":"<pre><code>$ vmh equalize --help\n\n Usage: vmh equalize [OPTIONS] AUDIO_FILE [OUTPUT_FILE]                                \n\n Add effects for audio file.                                                           \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    audio_file       PATH           [default: None] [required]                     \u2502\n\u2502      output_file      [OUTPUT_FILE]  [default: output.wav]                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                                         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"equalize/#api-for-developers","title":"API for developers","text":"Source code in <code>videomaker_helper/equalize.py</code> <pre><code>def process_audio(\n    input_file: str,\n    output_file: str = 'output.wav',\n    board: Pedalboard = _get_board(),\n) -&gt; Path:\n    with AudioFile(input_file, 'r') as ifile:\n        audio = ifile.read(ifile.frames)\n\n    effected = board(audio, ifile.samplerate)\n\n    with AudioFile(\n        output_file, 'w', ifile.samplerate, ifile.num_channels\n    ) as outfile:\n        outfile.write(effected)\n\n    return Path(output_file)\n</code></pre>"},{"location":"extract-audio/","title":"Extract audio","text":"<p>The <code>extract-audio</code> command is designed to detach the audio component from a video file. Whether you're repurposing the audio content of videos for podcasts, transcription, or other audio-centric endeavors, this tool provides a seamless experience.</p>"},{"location":"extract-audio/#features","title":"Features:","text":"<ul> <li>Dual Audio Extraction with <code>--eq</code> Flag: </li> <li>When you use the <code>--eq</code> flag, the command produces two distinct audio files:<ol> <li>A pure audio file extracted directly from the video.</li> <li>An enhanced audio file where compression is applied, and the volume is amplified by 10 decibels.</li> </ol> </li> <li> <p>This gives users the flexibility to have both the raw and enhanced versions for various applications.</p> </li> <li> <p>Default Output: If an <code>output_file</code> isn't specified, the extracted audio will default to <code>output.wav</code>. If <code>--eq</code> is used, the enhanced version might have a suffix or different naming to differentiate it from the raw audio.</p> </li> <li> <p>Opt-Out of Audio Enhancement: If you only want the raw, unaltered audio without the enhanced version, simply use the <code>--no-eq</code> flag.</p> </li> </ul>"},{"location":"extract-audio/#example-usage","title":"Example Usage:","text":"<p>To extract both raw and enhanced audio from a video named <code>presentation.mp4</code>:</p> <pre><code>vmh extract-audio presentation.mp4 --eq\n</code></pre> <p>For raw audio extraction without any enhancement:</p> <pre><code>vmh extract-audio presentation.mp4 --no-eq\n</code></pre>"},{"location":"extract-audio/#-help-flag-output","title":"<code>--help</code> Flag Output:","text":"<p>For a detailed breakdown of the available options and arguments for the <code>extract-audio</code> command:</p> <pre><code>vmh extract-audio --help\n\n Usage: vmh extract-audio [OPTIONS] VIDEO_FILE [OUTPUT_FILE]\n\n Extracts the audio from a video.\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    video_file       PATH           [default: None] [required]              \u2502\n\u2502      output_file      [OUTPUT_FILE]  [default: output.wav]                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --eq      --no-eq      Add compression and 10db of extracted audio           \u2502\n\u2502                        [default: eq]                                         \u2502\n\u2502 --help                 Show this message and exit.                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"extract-audio/#api-for-developers","title":"API for developers","text":"<p>Extract audio from v\u00eddeo.</p> <p>Parameters:</p> Name Type Description Default <code>video_file</code> <code>str</code> <p>Video to extract audio</p> required <code>output_file</code> <code>str</code> <p>Output file path</p> required <code>eq</code> <code>bool</code> <p>Equalization</p> <code>True</code> <p>Returns:</p> Type Description <code>Path | tuple[Path, Path]</code> <p>A audio Path</p> Source code in <code>videomaker_helper/audio.py</code> <pre><code>def extract_audio(\n    video_file: str,\n    output_file: str,\n    eq: bool = True,\n) -&gt; Path | tuple[Path, Path]:\n    \"\"\"Extract audio from v\u00eddeo.\n\n    Args:\n        video_file: Video to extract audio\n        output_file: Output file path\n        eq: Equalization\n\n    Returns:\n        A audio Path\n    \"\"\"\n    audio: AudioSegment = AudioSegment.from_file(video_file)\n    audio.export(output_file, format='wav')\n\n    if eq:\n        _eq_path = Path(output_file)\n        eq_path = _eq_path.parent / ('eq_' + _eq_path.name)\n        return (\n            Path(output_file),\n            Path(process_audio(output_file, str(eq_path))),\n        )\n\n    return Path(output_file)\n</code></pre>"},{"location":"kdenlive/","title":"kdenlive","text":""},{"location":"kdenlive/#kdenlive","title":"kdenlive","text":"<p>The <code>kdenlive</code> command facilitates video editors by generating XML files compatible with kdenlive settings, focusing specifically on automating the process of cutting silences from video timelines. This utility is especially designed to expedite the editing workflow, allowing users to jumpstart their projects with silences already trimmed, effectively eliminating one of the most time-consuming and tedious aspects of video editing.</p> <p>\u26a0\ufe0f Instability Alert: The interface for the kdenlive command is currently unstable. Users should anticipate potential modifications in future updates.</p>"},{"location":"kdenlive/#main-features","title":"Main Features:","text":"<ul> <li> <p>Automatic Silence-Cut Generation: VMH harnesses the <code>silences</code> command's capabilities to detect silent portions in your audio file. These detected silences are then converted into kdenlive-compatible XML cut instructions, effectively pre-empting the need for manual audio silence trimming.</p> </li> <li> <p>Efficient XML Creation for Kdenlive: This command abstracts away the complexities of kdenlive's XML structure. Instead of fumbling with XML details, users can generate the required XML content for their timelines swiftly and effortlessly.</p> </li> <li> <p>Fine-Tuned Silence Detection: Video editors can customize the silence detection parameters to suit their specific requirements:</p> </li> <li><code>--silence-time</code>: Sets the minimum duration for a segment to be recognized as silence.</li> <li><code>--threshold</code>: Determines the decibel level to qualify a segment as silent.</li> <li><code>--distance</code>: Adjusts the granularity of silence detection, with options from short intervals to exact durations.</li> </ul>"},{"location":"kdenlive/#sample-commands","title":"Sample Commands:","text":"<ol> <li> <p>For an automated silence-trimmed XML setup using <code>audio.wav</code>, <code>video.mp4</code>, and <code>project.xml</code>: </p><pre><code>vmh kdenlive project.kdenlive video.mp4\n</code></pre> </li> <li> <p>Customizing silence detection parameters for the XML generation: </p><pre><code>vmh kdenlive project.kdenlive video.mp4 --silence-time 500 --threshold -30\n</code></pre> </li> <li> <p>Using equilized audio </p><pre><code>vmh kdenlive project.kdenlive video.mp4 audio.mp3\n</code></pre> </li> </ol>"},{"location":"kdenlive/#-help-option-display","title":"<code>--help</code> Option Display:","text":"<p>A snapshot of available options and arguments for the <code>kdenlive</code> command:</p> <pre><code>$ vmh kdenlive --help\n\n Usage: vmh kdenlive [OPTIONS] INPUT_XML VIDEO_FILE [OUTPUT_PATH] [AUDIO_FILE]         \n\n Generates an XML compatible with kdenlive settings.                                   \n Note: It doesn\u2019t directly modify kdenlive files. It new kdenlive file with            \n [OUTPUT_FILE].                                                                        \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    input_xml        PATH           [default: None] [required]                     \u2502\n\u2502 *    video_file       PATH           [default: None] [required]                     \u2502\n\u2502      output_path      [OUTPUT_PATH]  [default: cuts.kdenlive]                       \u2502\n\u2502      audio_file       [AUDIO_FILE]   Optional audio equilized audio file            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --silence-time  -s                INTEGER                  Minimal time in ms for   \u2502\n\u2502                                                            configure a silence      \u2502\n\u2502                                                            [default: 400]           \u2502\n\u2502 --threshold     -t                INTEGER                  Value in db for detect   \u2502\n\u2502                                                            silence                  \u2502\n\u2502                                                            [default: -65]           \u2502\n\u2502 --distance      -d                [negative|tiny|small|me  Distance betweet         \u2502\n\u2502                                   dium|large|huge]         silences                 \u2502\n\u2502                                                            [default: tiny]          \u2502\n\u2502 --force             --no-force                             Ignore cache             \u2502\n\u2502                                                            [default: no-force]      \u2502\n\u2502 --help                                                     Show this message and    \u2502\n\u2502                                                            exit.                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"kdenlive/#api-for-developers","title":"API for developers","text":"Source code in <code>videomaker_helper/kdenlive.py</code> <pre><code>def cut(\n    audio_file: Path,\n    video_file: Path,\n    input_file: Path,\n    output_path: Path,\n    silence_time,\n    threshold: int,\n    force: bool,\n    distance: Literal[\n        'negative',\n        'tiny',\n        'small',\n        'medium',\n        'large',\n        'huge',\n    ] = 'tiny',\n) -&gt; Path:\n    if audio_file != Path(getcwd()):  # Typer don't support Path | None\n        times = detect_silences(\n            str(audio_file),\n            silence_time,\n            threshold,\n            distance,\n            force=force,\n        )\n    else:\n        times = detect_silences(\n            str(video_file),\n            silence_time,\n            threshold,\n            distance,\n            force=force,\n        )\n\n    chain_id, file_id, playlist = check_chain(video_file, input_file, 0)\n\n    _output_path: str = kdenlive_xml(\n        str(input_file),\n        playlist_id=playlist,\n        property_id=file_id,\n        chain_id=chain_id,\n        cuts=times,\n        output_path=str(output_path),\n    )\n    logger.info(f'Video playlist {playlist}')\n\n    chain_id, file_id, playlist = check_chain(video_file, input_file, 1)\n    kdenlive_xml(\n        _output_path,\n        playlist_id=playlist,\n        chain_id=chain_id,\n        property_id=file_id,\n        cuts=times,\n        output_path=_output_path,\n    )\n    logger.info(f'Audio playlist {playlist}')\n\n    if audio_file != Path(getcwd()):  # Typer don't support Path | None\n        chain_id, file_id, playlist = check_chain(audio_file, input_file)\n        kdenlive_xml(\n            _output_path,\n            playlist_id=playlist,\n            chain_id=chain_id,\n            property_id=file_id,\n            cuts=times,\n            output_path=_output_path,\n        )\n        logger.info(f'Audio playlist {playlist}')\n\n    return Path(_output_path).resolve()\n</code></pre>"},{"location":"threshold_and_distances/","title":"Threshold and Distances","text":""},{"location":"threshold_and_distances/#threshold-and-distances","title":"Threshold and Distances","text":"<p>TODO!</p>"}]}