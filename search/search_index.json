{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcf9 VideoMaker Helper","text":""},{"location":"#videomaker-helper","title":"\ud83d\udcf9 VideoMaker Helper","text":"<p>VideoMaker Helper is a collection of command-line utilities designed to simplify common tasks for video and audio content creators. These tools aim to automate specific aspects of the video-making process, reducing manual work and enhancing overall efficiency.</p>"},{"location":"#core-features","title":"\ud83e\udd5d Core Features:","text":"<ul> <li> <p>Silence Detection: Automatically detect silent segments in audio files. Useful for determining parts to edit or skip.</p> </li> <li> <p>Audio Equalization: Adjust the audio to a consistent level across a file. This tool can add compression and gain to improve the listening experience.</p> </li> <li> <p>Audio Extraction: Pull audio content from video files. With an option to receive both the raw extracted audio and an equalized version.</p> </li> <li> <p>Video Editing: Based on silence detection, automatically cut portions of a video, providing a streamlined content experience. See the examples at video-cut examples</p> </li> </ul>"},{"location":"#installation","title":"Installation:","text":"<p>To install VideoMaker Helper, simply use the following command:</p> <pre><code>pipx install git+https://github.com/dunossauro/videomaker-helper.git\n</code></pre> <p>With VideoMaker Helper installed, you can easily run any of the included tools from your terminal. It's a practical toolset for anyone looking to expedite their content creation process.</p> <p></p>"},{"location":"CHANGELOG/","title":"Changelogs","text":""},{"location":"CHANGELOG/#changelogs","title":"Changelogs","text":""},{"location":"CHANGELOG/#unreleased-2025-02-01","title":"Unreleased - 2025-02-01","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Link to the ropository in the documentation (#20)</li> <li>Changelog page in docs using snippets and towncrier (#33)</li> <li>Darkmode option in documentation (#34)</li> <li>Search bar in docs (#35)</li> <li>CI configuration to run to the Pull Requests (#40)</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Replacing appdirs (not manteined) for platformdirs (#6)</li> <li>Cache now only stores the silences without distance (#17)</li> <li>Change package name from vmh to videomaker_helper</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Breaking: Parameter in <code>extract-audio</code> to receive video, not audio (#18)</li> <li>Adjustments for kdenlive to recognize if video and .kdenlive is in the path</li> <li>Fixed package name on mkdocstrings and update mkdocstrings</li> <li>Migrate appdirs to platformdirs, now platformdirs creates .config path</li> <li>Moviepy 2.0 subclips support</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Para ver o guia de contribui\u00e7\u00e3o em Portugu\u00eas, clique aqui.</p>"},{"location":"contributing/#contribution-guide","title":"Contribution Guide","text":""},{"location":"contributing/#tldr","title":"TLDR","text":"<p>This project uses poetry as the project manager.</p> <pre><code>poetry install\n</code></pre> <p>If your contribution involves code, please refer to the Style Guide. You can see all available commands in the environment here.</p> <p>To check if everything is correct and the tests pass:</p> <pre><code>poetry run task test\n</code></pre> <p>To start the documentation:</p> <pre><code>poetry run task doc\n</code></pre> <p>If your change is visible to the users of the application, add an entry to the changelog:</p> <pre><code>towncrier create\n</code></pre> <p>The configurations are here.</p> <p>Before submitting your pull request, make sure there's an issue. If not, create one first. The branch name should contain the issue number. For more information.</p>"},{"location":"contributing/#environment-setup","title":"Environment Setup","text":"<p>If you need help setting up the development environment for this project, follow the instructions below.</p>"},{"location":"contributing/#project-management","title":"Project Management","text":"<p>This project uses poetry (2.0.1) as the project manager. You can install it using pipx.</p> <p>You can install it with:</p> <pre><code>pipx install poetry\n</code></pre> <p>In the project directory, run:</p> <pre><code>poetry install\n</code></pre> <p>This will install all project dependencies and the editable package.</p>"},{"location":"contributing/#development-tools","title":"Development Tools","text":"<p>A list of development tools and their configurations:</p>"},{"location":"contributing/#taskrunner-taskipy","title":"Taskrunner: taskipy","text":"<p>Taskipy makes it easier to run commands during the development process of the project:</p> pyproject.toml<pre><code>[tool.taskipy.tasks]\nformat = 'ruff format'\nlint = 'ruff check'\ntypos = 'typos videomaker_helper tests'\ntypes = 'mypy videomaker_helper'\npre_test = 'task lint'\ntest = 'pytest --cov=videomaker_helper/ -vv -x'\nstest = 'pytest'\npost_test = 'coverage html'\ndoc = 'mkdocs serve'\n</code></pre> <p>You can use <code>poetry run task --list</code> to see all available commands:</p> <pre><code>$ poetry run task --list\nformat    ruff format\nlint      ruff check\ntypos     typos videomaker_helper tests\ntypes     mypy videomaker_helper\npre_test  task lint\ntest      pytest --cov=videomaker_helper/ -vv -x\npost_test coverage html\ndoc       mkdocs serve\n</code></pre> <p>Below are some of the most common commands you can use:</p> <pre><code>poetry run task test    # Run the automated tests\npoetry run task format  # Format the code\npoetry run task typos   # Check the spelling in the code\n...\n</code></pre>"},{"location":"contributing/#formatting-and-linter-ruff","title":"Formatting and Linter: Ruff","text":"pyproject.toml<pre><code>[tool.ruff]\nline-length = 79\n\n[tool.ruff.lint]\nselect = ['I', 'N', 'F', 'E', 'W', 'D', 'PL']\nignore = ['D100', 'D101', 'D103', 'D104', 'D203', 'D213', 'PLR0913']\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n\n[tool.ruff.format]\nquote-style = \"single\"\n</code></pre> <p>For more details on style configuration, refer to the Style Guide.</p> <p>To check for compliance, run:</p> <pre><code>poetry run task lint    # Check the project's style guide\npoetry run task format  # Format the files\n</code></pre>"},{"location":"contributing/#static-type-checking-mypy","title":"Static Type Checking: Mypy","text":"pyproject.toml<pre><code>[tool.mypy]\nignore_missing_imports = true\n</code></pre> <p>To run type checks, execute:</p> <pre><code>poetry run task types\n</code></pre>"},{"location":"contributing/#spelling-check-in-code-typos","title":"Spelling Check in Code: Typos","text":"<p>To run the spelling check, execute:</p> <pre><code>poetry run task typos\n</code></pre>"},{"location":"contributing/#changelogs-with-towncrier","title":"Changelogs with towncrier","text":"<p>All visible changes should add a fragment to the changelog.</p> <p>The tags used follow the Keep a Changelog standard.</p> <p>To add a new fragment:</p> <pre><code>towncrier create\n</code></pre> <p>Configuration: </p>pyproject.toml<pre><code>[tool.towncrier]\ndirectory = \"changelog.d\"\nfilename = \"CHANGELOG.md\"\npackage = \"videomaker_helper\"\nstart_string = \"&lt;!-- towncrier release notes start --&gt;\\n\"\nunderlines = [\"\", \"\", \"\"]\ntitle_format = \"## [{version}](https://github.com/dunossauro/videomaker-helper/tree/{version}) - {project_date}\"\nissue_format = \"[#{issue}](https://github.com/dunossauro/videomaker-helper/issues/{issue})\"\n\n[[tool.towncrier.type]]\ndirectory = \"security\"\nname = \"Security\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"removed\"\nname = \"Removed\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"deprecated\"\nname = \"Deprecated\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"added\"\nname = \"Added\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"changed\"\nname = \"Changed\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"fixed\"\nname = \"Fixed\"\nshowcontent = true\n</code></pre>"},{"location":"contributing/#style-guide","title":"Style Guide","text":"<p>This project follows the style guides:</p> <ul> <li>PEP 8 for code</li> <li>PEP 257 for docstrings</li> <li>Google Docstrings for docstring formatting</li> <li>Keep a Changelog for changelogs</li> </ul> <p>To check code style, run:</p> <pre><code>poetry run task lint\n</code></pre>"},{"location":"contributing/#versioning-and-git","title":"Versioning and Git","text":"<p>There is no predefined format for commit messages. Feel free to choose a style that makes sense. Here are a few things to keep in mind:</p> <ul> <li>All PRs must have an issue. If you want to contribute something that doesn\u2019t have an issue yet, create one before submitting.</li> <li>PRs must be submitted to the <code>development</code> branch.</li> <li>The branch name must start with the issue number:<ul> <li>For example, if the issue number is 42, the branch name would be <code>42_short-description</code>, where 'short-description' is a brief summary of the change.</li> </ul> </li> <li>To notify others you're starting a contribution and allow them to track progress, open a draft PR and link the relevant issue.:<ul> <li>Once the changes are ready, you can mark the PR as \"Ready for review.\"</li> </ul> </li> </ul>"},{"location":"contributing/#changelogs","title":"Changelogs","text":"<p>All visible changes to the users of the application should be documented in the changelog. This helps maintain a clear history of changes and ensures users are aware of updates.</p> <p>After making a change, if it is visible to the application's users, add an entry to the changelog using <code>towncrier</code>:</p> <pre><code>towncrier create\n</code></pre>"},{"location":"contributing/#continuous-integration","title":"Continuous Integration","text":"<p>This project uses GitHub Actions for Continuous Integration (CI). If you need to run the entire process locally, you can use act:</p> <pre><code>act\n</code></pre> <p><code>act</code> is a tool that emulates GitHub Actions workflows locally, allowing you to run tests and CI processes without needing to push to the repository.</p> <p>The full CI configuration can be found in <code>.github/workflows/pipeline.yaml</code></p>"},{"location":"contributing/#guia-de-contribuicao","title":"Guia de contribui\u00e7\u00e3o","text":""},{"location":"contributing/#tldr_1","title":"TLDR","text":"<p>O projeto usa o poetry como gerenciador de projeto.</p> <pre><code>poetry install\n</code></pre> <p>Se sua contribui\u00e7\u00e3o envolver c\u00f3digo, consulte o Guia de estilo. Voc\u00ea pode ver todos os comandos dispon\u00edveis no ambiente aqui.</p> <p>Para checar se tudo est\u00e1 correto e os testes passam:</p> <pre><code>poetry run task test\n</code></pre> <p>Para iniciar a documenta\u00e7\u00e3o:</p> <pre><code>poetry run task doc\n</code></pre> <p>Caso sua altera\u00e7\u00e3o seja vis\u00edvel a quem for usar a aplica\u00e7\u00e3o, adicione uma entrada ao changelog:</p> <pre><code>towncrier create\n</code></pre> <p>As configura\u00e7\u00f5es est\u00e3o aqui.</p> <p>Antes de enviar seu pull request, garanta que exista uma issue, se n\u00e3o houver uma, crie antes de submeter, o nome da branch deve conter o n\u00famero da issue. Caso precise de mais informa\u00e7\u00f5es.</p>"},{"location":"contributing/#configuracao-do-ambiente","title":"Configura\u00e7\u00e3o do ambiente","text":"<p>Se voc\u00ea precisar de ajuda para configurar o ambiente de desenvolvimento deste projeto, siga as instru\u00e7\u00f5es abaixo.</p>"},{"location":"contributing/#gerenciamento-de-projeto","title":"Gerenciamento de projeto","text":"<p>Esse projeto usa o poetry (2.0.1) como gerenciador de projeto. Voc\u00ea pode instalar ele com pipx.</p> <p>Voc\u00ea pode instalar com:</p> <pre><code>pipx install poetry\n</code></pre> <p>No diret\u00f3rio do projeto, execute:</p> <pre><code>poetry install\n</code></pre> <p>para instalar todas as depend\u00eancias do projeto e o pacote edit\u00e1vel.</p>"},{"location":"contributing/#ferramentas-de-desenvolvimento","title":"Ferramentas de desenvolvimento","text":"<p>Uma lista das ferramentas de desenvolvimento e suas configura\u00e7\u00f5es:</p>"},{"location":"contributing/#taskrunner-taskipy_1","title":"Taskrunner: taskipy","text":"<p>O taskipy facilita a execu\u00e7\u00e3o dos comandos durante o momento de desenvolvimento do projeto:</p> pyproject.toml<pre><code>[tool.taskipy.tasks]\nformat = 'ruff format'\nlint = 'ruff check'\ntypos = 'typos videomaker_helper tests'\ntypes = 'mypy videomaker_helper'\npre_test = 'task lint'\ntest = 'pytest --cov=videomaker_helper/ -vv -x'\nstest = 'pytest'\npost_test = 'coverage html'\ndoc = 'mkdocs serve'\n</code></pre> <p>Voc\u00ea pode usar poetry run task --list para ver todos os comandos dispon\u00edveis:</p> <pre><code>$ poetry run task --list\nformat    ruff format\nlint      ruff check\ntypos     typos videomaker_helper tests\ntypes     mypy videomaker_helper\npre_test  task lint\ntest      pytest --cov=videomaker_helper/ -vv -x\npost_test coverage html\ndoc       mkdocs serve\n</code></pre> <p>Abaixo est\u00e3o alguns dos comandos mais comuns que voc\u00ea pode utilizar:</p> <pre><code>poetry run task test    # Executa os testes automatizados\npoetry run task format  # Executa a formata\u00e7\u00e3o do c\u00f3digo\npoetry run task typos   # Checa a grafia do c\u00f3digo\n...\n</code></pre>"},{"location":"contributing/#formatacao-e-linter-ruff","title":"Formata\u00e7\u00e3o e linter: Ruff","text":"pyproject.toml<pre><code>[tool.ruff]\nline-length = 79\n\n[tool.ruff.lint]\nselect = ['I', 'N', 'F', 'E', 'W', 'D', 'PL']\nignore = ['D100', 'D101', 'D103', 'D104', 'D203', 'D213', 'PLR0913']\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n\n[tool.ruff.format]\nquote-style = \"single\"\n</code></pre> <p>Para mais detalhes sobre a configura\u00e7\u00e3o do estilo, consulte o Guia de estilo.</p> <p>Basicamente para executar a checagem voc\u00ea deve executar:</p> <pre><code>poetry run task lint    # Checa o guia de estilo do projeto\npoetry run task format  # Formata os arquivos\n</code></pre>"},{"location":"contributing/#checagem-de-tipos-estaticos-mypy","title":"Checagem de tipos est\u00e1ticos: Mypy","text":"pyproject.toml<pre><code>[tool.mypy]\nignore_missing_imports = true\n</code></pre> <p>Para executar a checagem de tipos voc\u00ea pode executar:</p> <pre><code>poetry run task types\n</code></pre>"},{"location":"contributing/#checagem-de-erros-de-grafia-no-codigo-typos","title":"Checagem de erros de grafia no c\u00f3digo: Typos","text":"<p>Para executar a checagem de erros de grafia voc\u00ea pode executar:</p> <pre><code>poetry run task typos\n</code></pre>"},{"location":"contributing/#changelogs-com-towncrier","title":"Changelogs com towncrier","text":"<p>Todas as altera\u00e7\u00f5es vis\u00edveis devem adicionar um fragmento ao changelog.</p> <p>As tags usadas seguem o padr\u00e3o Keep a changelook.</p> <p>Para adicionar um novo fragmento:</p> <pre><code>towncrier create\n</code></pre> <p>Configura\u00e7\u00e3o: </p>pyproject.toml<pre><code>[tool.towncrier]\ndirectory = \"changelog.d\"\nfilename = \"CHANGELOG.md\"\npackage = \"videomaker_helper\"\nstart_string = \"&lt;!-- towncrier release notes start --&gt;\\n\"\nunderlines = [\"\", \"\", \"\"]\ntitle_format = \"## [{version}](https://github.com/dunossauro/videomaker-helper/tree/{version}) - {project_date}\"\nissue_format = \"[#{issue}](https://github.com/dunossauro/videomaker-helper/issues/{issue})\"\n\n[[tool.towncrier.type]]\ndirectory = \"security\"\nname = \"Security\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"removed\"\nname = \"Removed\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"deprecated\"\nname = \"Deprecated\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"added\"\nname = \"Added\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"changed\"\nname = \"Changed\"\nshowcontent = true\n\n[[tool.towncrier.type]]\ndirectory = \"fixed\"\nname = \"Fixed\"\nshowcontent = true\n</code></pre>"},{"location":"contributing/#guia-de-estilo","title":"Guia de estilo","text":"<p>Esse projeto segue os guias de estilo:</p> <ul> <li>PEP 8 para c\u00f3digo</li> <li>PEP 257 para docstrings</li> <li>Google Docstrings para o formato das docstrings</li> <li>Keep a changelook para changelogs</li> </ul> <p>Para checar a conformidade do c\u00f3digo voc\u00ea pode executar:</p> <pre><code>poetry run task lint\n</code></pre>"},{"location":"contributing/#versionamento-e-git","title":"Versionamento e git","text":"<p>Para enviar sua contribui\u00e7\u00e3o, n\u00e3o h\u00e1 um formato pr\u00e9-definido para as mensagens de commit. Sinta-se \u00e0 vontade para escolher um estilo que fa\u00e7a sentido. Somente alguns pontos para aten\u00e7\u00e3o:</p> <ul> <li>Todos os PRs enviados devem ter uma issue, caso voc\u00ea queira contribuir com algo que ainda n\u00e3o tem issue, abra uma issue antes.</li> <li>As solicita\u00e7\u00f5es de PR devem ser enviadas para branch development.</li> <li>O nome da branch deve iniciar com o n\u00famero da issue<ul> <li>Por exemplo, se a issue for n\u00famero 42, o nome da branch seria <code>42_texto</code>, onde 'texto' \u00e9 uma descri\u00e7\u00e3o curta da mudan\u00e7a.</li> </ul> </li> <li>Para notificar que voc\u00ea est\u00e1 come\u00e7ando uma contribui\u00e7\u00e3o e permitir que outros saibam, abra um PR como 'draft' e vincule a issue relevante:<ul> <li>Ao finalizar as altera\u00e7\u00f5es voc\u00ea pode clicar em \"Ready for review\"</li> </ul> </li> </ul>"},{"location":"contributing/#changelogs_1","title":"Changelogs","text":"<p>Todas as altera\u00e7\u00f5es vis\u00edveis para os usu\u00e1rios da aplica\u00e7\u00e3o devem ser documentadas no changelog. Isso ajuda a manter um hist\u00f3rico claro das mudan\u00e7as feitas e garante que os usu\u00e1rios estejam cientes das atualiza\u00e7\u00f5es.</p> <p>Ap\u00f3s a altera\u00e7\u00e3o, caso ela seja vis\u00edvel para quem usa aplica\u00e7\u00e3o adicione uma entrada no changelog usando o <code>towncrier</code>:</p> <pre><code>towncrier create\n</code></pre>"},{"location":"contributing/#integracao-continua","title":"Integra\u00e7\u00e3o cont\u00ednua","text":"<p>Este projeto utiliza o GitHub Actions para realizar a Integra\u00e7\u00e3o Cont\u00ednua (CI). Se precisar executar todo o fluxo localmente voc\u00ea pode usar o act:</p> <pre><code>act\n</code></pre> <p>O act \u00e9 uma ferramenta que emula os workflows do GitHub Actions localmente, permitindo que voc\u00ea execute testes e processos de integra\u00e7\u00e3o cont\u00ednua sem precisar fazer push para o reposit\u00f3rio.</p> <p>A configura\u00e7\u00e3o completa do CI pode ser encontrada em <code>.github/workflows/pipeline.yaml</code></p>"},{"location":"extract-audio/","title":"Extract audio","text":"<p>The <code>extract-audio</code> command is designed to detach the audio component from a video file. Whether you're repurposing the audio content of videos for podcasts, transcription, or other audio-centric endeavors, this tool provides a seamless experience.</p>"},{"location":"extract-audio/#features","title":"Features:","text":"<ul> <li>Dual Audio Extraction with <code>--eq</code> Flag: </li> <li>When you use the <code>--eq</code> flag, the command produces two distinct audio files:<ol> <li>A pure audio file extracted directly from the video.</li> <li>An enhanced audio file where compression is applied, and the volume is amplified by 10 decibels.</li> </ol> </li> <li> <p>This gives users the flexibility to have both the raw and enhanced versions for various applications.</p> </li> <li> <p>Default Output: If an <code>output_file</code> isn't specified, the extracted audio will default to <code>output.wav</code>. If <code>--eq</code> is used, the enhanced version might have a suffix or different naming to differentiate it from the raw audio.</p> </li> <li> <p>Opt-Out of Audio Enhancement: If you only want the raw, unaltered audio without the enhanced version, simply use the <code>--no-eq</code> flag.</p> </li> </ul>"},{"location":"extract-audio/#example-usage","title":"Example Usage:","text":"<p>To extract both raw and enhanced audio from a video named <code>presentation.mp4</code>:</p> <pre><code>vmh extract-audio presentation.mp4 --eq\n</code></pre> <p>For raw audio extraction without any enhancement:</p> <pre><code>vmh extract-audio presentation.mp4 --no-eq\n</code></pre>"},{"location":"extract-audio/#-help-flag-output","title":"<code>--help</code> Flag Output:","text":"<p>For a detailed breakdown of the available options and arguments for the <code>extract-audio</code> command:</p> <pre><code>vmh extract-audio --help\n\n Usage: vmh extract-audio [OPTIONS] VIDEO_FILE [OUTPUT_FILE]\n\n Extracts the audio from a video.\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    video_file       PATH           [default: None] [required]              \u2502\n\u2502      output_file      [OUTPUT_FILE]  [default: output.wav]                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --eq      --no-eq      Add compression and 10db of extracted audio           \u2502\n\u2502                        [default: eq]                                         \u2502\n\u2502 --help                 Show this message and exit.                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"extract-audio/#api-for-developers","title":"API for developers","text":"<p>Extract audio from v\u00eddeo.</p> <p>Parameters:</p> Name Type Description Default <code>video_file</code> <code>str</code> <p>Video to extract audio</p> required <code>output_file</code> <code>str</code> <p>Output file path</p> required <code>eq</code> <code>bool</code> <p>Equalization</p> <code>True</code> <p>Returns:</p> Type Description <code>Path | tuple[Path, Path]</code> <p>A audio Path</p> Source code in <code>videomaker_helper/audio.py</code> <pre><code>def extract_audio(\n    video_file: str,\n    output_file: str,\n    eq: bool = True,\n) -&gt; Path | tuple[Path, Path]:\n    \"\"\"Extract audio from v\u00eddeo.\n\n    Args:\n        video_file: Video to extract audio\n        output_file: Output file path\n        eq: Equalization\n\n    Returns:\n        A audio Path\n    \"\"\"\n    audio: AudioSegment = AudioSegment.from_file(video_file)\n    audio.export(output_file, format='wav')\n\n    if eq:\n        _eq_path = Path(output_file)\n        eq_path = _eq_path.parent / ('eq_' + _eq_path.name)\n        return (\n            Path(output_file),\n            Path(process_audio(output_file, str(eq_path))),\n        )\n\n    return Path(output_file)\n</code></pre>"}]}